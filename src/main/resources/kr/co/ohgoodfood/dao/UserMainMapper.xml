<?xml version="1.0" encoding="UTF-8"?>
<!-- [refactor] main을 위한 전용 mapper -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http:/mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ohgoodfood.dao.UserMainMapper">
    <resultMap id="MainStoreDTO" type="MainStoreDTO">
        <!-- store 연관관계 매핑 -->
        <association property="store" javaType="Store">
            <id     column="store_id"          property="store_id"/>
            <result column="store_name"        property="store_name"/>
            <result column="store_status"      property="store_status"/>
            <result column="store_menu"      property="store_menu"/>
            <result column="category_bakery"   property="categories_bakery"/>
            <result column="category_fruit"   property="category_fruit"/>
            <result column="category_salad"   property="category_salad"/>
            <result column="category_others"   property="category_others"/>
            <result column="confirmed"   property="confirmed"/>
            <result column="latitude"   property="latitude"/>
            <result column="longitude"   property="longitude"/>
        </association>

        <!-- product 연관관계 매핑 -->
        <association property="product" javaType="Product">
            <id     column="product_no"          property="product_no"/>
            <result column="pickup_start"        property="pickup_start"/>
            <result column="pickup_end"      property="pickup_end"/>
            <result column="origin_price"   property="origin_price"/>
            <result column="sale_price"   property="sale_price"/>
            <result column="reservation_end"   property="reservation_end"/>
            <result column="amount"   property="amount"/>
            <result column="product_explain"   property="product_explain"/>
        </association>

        <!-- Image 연관관계 매핑 -->
        <association property="image" javaType="Image">
            <result column="store_img"   property="store_img"/>
        </association>
    </resultMap>

    <!-- selectAllStore mapper, main에서 이용한다. -->
    <select id="selectAllStore" parameterType="map" resultMap="MainStore">
        SELECT
            s.store_id AS store_id, s.store_name AS store_name, s.store_menu AS store_menu, s.store_status AS store_status, s.category_bakery AS category_bakery,s.category_fruit AS category_fruit, s.category_salad AS category_salad, s.category_others  AS category_others, s.closed_at AS closed_at, s.latitude AS latitude, s.longitude AS longitude,
            pf.product_no AS product_no, pf.pickup_start AS pickup_start,pf.pickup_end AS pickup_end, pf.origin_price AS origin_price, pf.sale_price AS sale_price, pf.product_explain AS product_explain, pf.reservation_end AS reservation_end, pf.amount AS amount,
            img.first_img AS store_img
        FROM Store s
        LEFT JOIN Product pf
            ON pf.store_id = s.store_id
            AND DATE(pf.reservation_end) = CURDATE()
        LEFT JOIN (
            SELECT
                store_id, MIN(store_img) AS first_img
            FROM Image
            GROUP BY store_id
        ) img ON img.store_id = s.store_id
        <where>
            s.confirmed = 'Y'
            <if test="filter.store_status != null">
                AND s.store_status = #{filter.store_status} AND pf.amount >= #{filter.amount}
            </if>
            <if test="filter.pickup_start != null">
                AND DATE(pf.pickup_start) = #{filter.pickup_start}
            </if>
            <if test="filter.category_bakery != null">
                AND s.category_bakery = #{filter.category_bakery}
            </if>
            <if test="filter.category_fruit != null">
                AND s.category_fruit = #{filter.category_fruit}
            </if>
            <if test="filter.category_salad != null">
                AND s.category_salad = #{filter.category_salad}
            </if>
            <if test="filter.category_others != null">
                AND s.category_others = #{filter.category_others}
            </if>
            <!-- 위도/경도 필터링: 반경 4km, 검색어가 들어갔을때는 위도 경도 필터링 안걸리게 한다. -->
            <if test="filter.latitude != null and filter.longitude != null and (filter.search == null or filter.search == '')">
                AND s.latitude  BETWEEN #{filter.latitude}  - 0.027 AND #{filter.latitude}  + 0.027
                AND s.longitude BETWEEN #{filter.longitude} - 0.034 AND #{filter.longitude} + 0.034
            </if>
            <!-- 가게 이름, 가게 대표 메뉴, 가게 상세 검색 필터링 추가 -->
            <if test="filter.search != null and filter.search != ''">
                AND (
                    s.store_name LIKE CONCAT('%', #{filter.search}, '%')
                    OR s.store_menu LIKE CONCAT('%', #{filter.search}, '%')
                    OR pf.product_explain LIKE CONCAT('%', #{filter.search}, '%')
                )
            </if>
            <!-- ORDER BY 순서 : 오픈, 매진, 마감순 정렬 -->
        </where>
        ORDER BY
            CASE WHEN s.store_status = 'Y' AND amount >  0 THEN 1
                WHEN s.store_status = 'Y' AND amount =  0 THEN 2
                ELSE 3
        END;
    </select>

    <!-- selectOneStoreByStoreId mapper, main map에서 이용한다. -->
    <select id="selectOneStoreByStoreId" parameterType="map" resultMap="MainStore">
        SELECT
            s.store_id AS store_id, s.store_name AS store_name, s.store_menu AS store_menu, s.store_status AS store_status, s.category_bakery AS category_bakery,s.category_fruit AS category_fruit, s.category_salad AS category_salad, s.category_others  AS category_others, s.closed_at AS closed_at,
            pf.product_no AS product_no, pf.pickup_start AS pickup_start,pf.pickup_end AS pickup_end, pf.origin_price AS origin_price, pf.sale_price AS sale_price, pf.product_explain AS product_explain, pf.reservation_end AS reservation_end, pf.amount AS amount,
            img.first_img AS store_img
        FROM Store s
        LEFT JOIN Product pf
            ON pf.store_id = s.store_id
            AND DATE(pf.reservation_end) = CURDATE()
        LEFT JOIN (
            SELECT
                store_id,
                MIN(store_img) AS first_img
            FROM Image
            GROUP BY store_id
        ) img ON img.store_id = s.store_id
        <where>
            s.confirmed = 'Y'
            <if test="filter.store_status != null">
                AND s.store_status = #{filter.store_status} AND pf.amount >= #{filter.amount}
            </if>
            <if test="filter.pickup_start != null">
                AND DATE(pf.pickup_start) = #{filter.pickup_start}
            </if>
            <if test="filter.category_bakery != null">
                AND s.category_bakery = #{filter.category_bakery}
            </if>
            <if test="filter.category_fruit != null">
                AND s.category_fruit = #{filter.category_fruit}
            </if>
            <if test="filter.category_salad != null">
                AND s.category_salad = #{filter.category_salad}
            </if>
            <if test="filter.category_others != null">
                AND s.category_others = #{filter.category_others}
            </if>
            <!-- 가게 id로 필터링해서 하나만 가져와야 하는 경우 -->
            AND s.store_id = #{filter.store_id};
        </where>
    </select>
</mapper>