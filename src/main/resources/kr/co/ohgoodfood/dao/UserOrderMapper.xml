<?xml version="1.0" encoding="UTF-8"?>
<!-- [refactor] order을 위한 전용 mapper -->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http:/mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.co.ohgoodfood.dao.UserOrderMapper">
    <!-- id는 resultMap의 식별자, type은 결과를 채워넣을 DTO 클래스 -->
    <resultMap id="UserOrderDTO" type="kr.co.ohgoodfood.dto.UserOrderDTO">
        <!-- store 연관관계 매핑 -->
        <association property="store" javaType="kr.co.ohgoodfood.dto.Store">
            <id     column="store_id"          property="store_id"/>
            <result column="store_name"        property="store_name"/>
        </association>

        <!-- Paid 연관관계 매핑 -->
        <association property="paid" javaType="kr.co.ohgoodfood.dto.Paid">
            <id column="paid_no"   property="paid_no"/>
            <result column="paid_price"   property="paid_price"/>
            <result column="paid_status"   property="paid_status"/>
            <result column="paid_point"   property="paid_point"/>
        </association>

        <!-- product 연관관계 매핑 -->
        <association property="product" javaType="kr.co.ohgoodfood.dto.Product">
            <id     column="product_no"          property="product_no"/>
            <result column="pickup_start"        property="pickup_start"/>
            <result column="pickup_end"      property="pickup_end"/>
            <result column="sale_price"   property="sale_price"/>
            <result column="reservation_end"   property="reservation_end"/>
        </association>

        <!-- Orders 연관관계 매핑 -->
        <association property="order" javaType="kr.co.ohgoodfood.dto.Orders">
            <id column="order_no"   property="order_no"/>
            <result column="ordered_at"   property="ordered_at"/>
            <result column="quantity"   property="quantity"/>
            <result column="order_status"   property="order_status"/>
            <result column="canceld_from"   property="canceld_from"/>
            <result column="order_code"   property="order_code"/>
            <result column="user_id"   property="user_id"/>
        </association>

        <!-- Image 연관관계 매핑 -->
        <association property="image" javaType="kr.co.ohgoodfood.dto.Image">
            <result column="store_img"   property="store_img"/>
        </association>
    </resultMap>

    <!-- selectOrderList mapper -->
    <select id="selectOrderList" resultType="UserOrderDTO">
        SELECT
            s.store_name AS store_name, s.store_id AS store_id,
            pa.paid_no AS paid_no, pa.paid_price AS paid_price, pa.paid_status AS paid_status, pa.paid_point AS paid_point,
            p.product_no AS product_no, p.pickup_start AS pickup_start, p.pickup_end AS pickup_end, p.sale_price AS sale_price, p.reservation_end AS reservation_end,
            o.order_no AS order_no, o.ordered_at AS ordered_at, o.quantity AS quantity, o.order_status AS order_status, o.canceld_from AS canceld_from,
            o.order_code AS order_code, o.user_id AS user_id,
            MIN(i.store_img) AS store_img,
        CASE WHEN COUNT(r.review_no) > 0 THEN 1 ELSE 0 END AS has_review
        FROM Store s
            JOIN Product p ON s.store_id = p.store_id
            JOIN Image   i ON i.store_id = s.store_id
            JOIN Orders  o  ON o.product_no = p.product_no
            JOIN Paid    pa ON pa.order_no = o.order_no
            LEFT JOIN Review r ON r.order_no = o.order_no
        <where>
            <!-- user_id는 무조건 있어야 하므로, null 아닐 때 조건은 제거. -->
            AND o.user_id = #{filter.user_id}
            <!-- ready는 제외 -->
            AND o.order_status != 'ready'
            <if test="filter.order_status != null">
                <choose>
                    <!-- order_status가 List일 때 IN 절 -->
                    <when test="filter.order_status instanceof java.util.List">
                        AND o.order_status IN
                        <foreach item="status"
                                 collection="filter.order_status"
                                 open="("
                                 separator=","
                                 close=")">
                            #{status}
                        </foreach>
                    </when>
                    <!-- 단일값일때 처리 -->
                    <otherwise>
                        AND o.order_status = #{filter.order_status}
                    </otherwise>
                </choose>
            </if>
            <!-- ORDER BY 순서 : 확정진행중, 확정완료, 픽업완료, 취소순 -->
        </where>
        GROUP BY
            pa.paid_no, pa.paid_price, pa.paid_status,
            s.store_name, s.store_id,
            p.product_no, p.pickup_start, p.pickup_end, p.sale_price,
            o.order_no, o.ordered_at, o.quantity,
            o.order_status, o.canceld_from, o.order_code, o.user_id
        ORDER BY
        CASE o.order_status
            WHEN 'reservation' THEN 1
            WHEN 'confirmed'   THEN 2
            WHEN 'pickup'      THEN 3
            WHEN 'cancel'      THEN 4
        ELSE 5
        END,
        o.ordered_at DESC;
    </select>

    <!-- updateOrderStatus mapper-->
    <update id="updateOrderStatus" parameterType="kr.co.ohgoodfood.dto.UserOrderRequest">
        UPDATE Orders
        <set>
            <if test="order_request.order_status != null">
                order_status = #{order_request.order_status},
            </if>
            <if test="order_request.order_status == 'cancel'">
                canceld_from = #{order_request.canceld_from},
            </if>
            <if test="order_request.order_status == 'confirmed'">
                order_code = #{order_request.order_code},
            </if>
        </set>
        WHERE order_no = #{order_request.order_no}
        AND user_id = #{order_request.user_id};
    </update>

    <!-- restoreProductAmount mapper-->
    <update id="restoreProductAmount" parameterType="kr.co.ohgoodfood.dto.UserOrderRequest">
        UPDATE Product
        SET amount = amount + #{order_request.quantity}
        WHERE product_no = #{order_request.product_no}
    </update>

</mapper>